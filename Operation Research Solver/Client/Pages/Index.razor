@page "/"
@using Shared.Models
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject IJSRuntime JS
@using Shared.Models
@using System.Globalization

<div class="container mx-auto px-4 py-8 max-w-6xl">
    <!-- Header Section -->
    <header class="text-center mb-12">
        <h1 class="text-4xl font-bold text-blue-800 mb-2">Linear Programming Solver</h1>
        <p class="text-lg text-gray-600 max-w-3xl mx-auto">
            Upload your LP/IP model file, select an algorithm, and get optimized solutions with sensitivity analysis.
        </p>
    </header>

    <div class="bg-white rounded-xl shadow-lg overflow-hidden">
        <!-- Tabs Navigation -->
        <div class="flex border-b border-gray-200">
            <button class="tab-btn py-4 px-6 font-medium text-gray-500 hover:text-blue-600 focus:outline-none border-b-2 border-transparent hover:border-blue-300 active" data-tab="upload">
                <i class="fas fa-upload mr-2"></i>Model Upload
            </button>
            <button class="tab-btn py-4 px-6 font-medium text-gray-500 hover:text-blue-600 focus:outline-none border-b-2 border-transparent hover:border-blue-300" data-tab="solve">
                <i class="fas fa-calculator mr-2"></i>Solve Model
            </button>
            <button class="tab-btn py-4 px-6 font-medium text-gray-500 hover:text-blue-600 focus:outline-none border-b-2 border-transparent hover:border-blue-300" data-tab="analysis">
                <i class="fas fa-chart-line mr-2"></i>Sensitivity Analysis
            </button>
        </div>

        <!-- Tab Contents -->
        <div class="p-6">
            <!-- Upload Tab -->
            <div id="upload" class="tab-content active">
                <div class="mb-8">
                    <h2 class="text-2xl font-semibold text-gray-800 mb-4">Upload Your Model</h2>
                    <p class="text-gray-600 mb-6">
                        Upload a .txt file containing your LP/IP model in the specified format. See example below.
                    </p>

                    <div class="flex flex-col md:flex-row gap-8">
                        <div class="flex-1">
                            <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                                <label for="modelFile" class="file-input-label cursor-pointer">
                                    <div class="flex flex-col items-center justify-center">
                                        <i class="fas fa-cloud-upload-alt text-5xl text-blue-500 mb-4"></i>
                                        <h3 class="text-lg font-medium text-gray-700 mb-2">Click to upload or drag and drop</h3>
                                        <p class="text-sm text-gray-500 mb-4">.txt files only</p>
                                        <span class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition">Select File</span>
                                    </div>
                                    <!-- Hidden input stays visually identical; now Blazor can read the file -->
                                    <InputFile id="modelFile" class="hidden" accept=".txt" OnChange="HandleFile" />
                                </label>
                            </div>
                            <div id="fileInfo" class="mt-4 text-sm text-gray-600 hidden">
                                <i class="fas fa-check-circle text-green-500 mr-2"></i>
                                <span id="fileName">example.txt</span> selected
                            </div>
                        </div>

                        @* example block *@
                        <div class="flex-1">
                            <h3 class="text-lg font-medium text-gray-800 mb-3">File Format Example</h3>
                            <div class="bg-gray-100 p-4 rounded-lg font-mono text-sm">
                                <div class="text-blue-600 font-semibold mb-1"># Objective function (max/min and coefficients)</div>
                                <div class="ml-4 mb-3">max +2 +3 +3 +5 +2 +4</div>

                                <div class="text-blue-600 font-semibold mb-1"># Constraints (one per line)</div>
                                <div class="ml-4 mb-3">+11 +8 +6 +14 +10 +10 &lt;= 40</div>
                                <div class="ml-4 mb-3">+5 +2 +9 +0 +7 +3 &lt;= 25 <span class="text-gray-500 ml-2"># Optional additional constraints</span></div>

                                <div class="text-blue-600 font-semibold mb-1"># Variable restrictions (last line)</div>
                                <div class="ml-4">bin bin bin bin bin bin</div>
                            </div>

                            <div class="mt-4 text-sm text-gray-600">
                                <p class="mb-2"><span class="font-medium">Format Rules:</span></p>
                                <ul class="list-disc pl-5 space-y-1">
                                    <li>First line: Problem type (<code>max</code>/<code>min</code>) and objective coefficients</li>
                                    <li>Middle lines: Constraints (coefficients, operator <code> &lt;=</code> <code>=</code> <code>&gt;=</code>, RHS)</li>
                                    <li>Last line: Variable restrictions (<code>+</code>, <code>-</code>, <code>int</code>, <code>bin</code>, <code>urs</code>)</li>
                                    <li>Separate all values with spaces</li>
                                    <li>Comments can be added with <code>#</code></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="filePreviewSection" class="hidden">
                    <h3 class="text-xl font-semibold text-gray-800 mb-3">File Preview</h3>
                    <div class="bg-gray-50 border border-gray-200 rounded-lg p-4">
                        <pre id="filePreview" class="text-sm">@(_modelText)</pre>
                    </div>
                </div>
            </div>

            <!-- Solve Tab -->
            <div id="solve" class="tab-content">
                <h2 class="text-2xl font-semibold text-gray-800 mb-6">Solve Model</h2>

                <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                    <div class="md:col-span-2">
                        <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
                            <h3 class="text-lg font-medium text-gray-800 mb-3">Model Summary</h3>
                            <div id="modelSummary" class="text-sm text-gray-700">
                                No model loaded. Please upload a file in the Upload section.
                            </div>
                        </div>
                    </div>

                    <div>
                        <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
                            <h3 class="text-lg font-medium text-gray-800 mb-3">Algorithm Selection</h3>
                            <div class="mb-4">
                                <label for="algorithm" class="block text-sm font-medium text-gray-700 mb-1">Choose solving method:</label>
                                <InputSelect id="algorithm"
                                             class="w-full border rounded px-2 py-1"
                                             @bind-Value="request.Algorithm"
                                             TValue="Algorithm">
                                    <option value="@Algorithm.PrimalSimplex">Primal Simplex</option>
                                    <option value="@Algorithm.RevisedSimplex">Revised Simplex</option>
                                    <option value="@Algorithm.BranchAndBound">Branch &amp; Bound</option>
                                    <option value="@Algorithm.Knapsack01">Knapsack</option>
                                    <option value="@Algorithm.CuttingPlane">Cutting Plane</option>
                                </InputSelect>
                            </div>
                            <button id="runSolverBtn" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition flex items-center justify-center"
                                    @onclick="RunSolver">
                                <i class="fas fa-play-circle mr-2"></i> Run Solver
                            </button>
                        </div>
                    </div>
                </div>

                <div class="mb-8">
                    <h3 class="text-xl font-semibold text-gray-800 mb-3">Solution Output</h3>
                    <div class="output-container bg-gray-50 border border-gray-200 rounded-lg p-4">
                        <div id="solverOutput" class="text-sm font-mono">
                            @if (string.IsNullOrWhiteSpace(_output))
                            {
                                <p class="text-gray-500 italic">Solution output will appear here after running the solver.</p>
                            }
                            else
                            {
                                <pre>@_output</pre>
                            }
                        </div>
                    </div>
                </div>

                <div class="flex flex-wrap gap-3">
                    <button id="downloadResultsBtn" class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-md transition flex items-center disabled:opacity-50"
                            @onclick="DownloadResults" disabled="@string.IsNullOrWhiteSpace(_output)">
                        <i class="fas fa-file-download mr-2"></i> Download Results
                    </button>
                    <button id="resetSolverBtn" class="bg-gray-600 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-md transition flex items-center"
                            @onclick="ResetSolver">
                        <i class="fas fa-redo mr-2"></i> Reset
                    </button>
                </div>
            </div>

            <!-- Analysis Tab -->
            <div id="analysis" class="tab-content">
                <h2 class="text-2xl font-semibold text-gray-800 mb-6">Sensitivity Analysis</h2>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
                    <div>
                        <div class="bg-gray-50 p-4 rounded-lg border border-gray-200 mb-6">
                            <h3 class="text-lg font-medium text-gray-800 mb-3">Current Solution</h3>
                            <div id="currentSolution" class="text-sm">
                                @if (string.IsNullOrWhiteSpace(_solutionSummary))
                                {
                                    <p class="text-gray-500 italic">No solution available yet. Please solve a model first.</p>
                                }
                                else
                                {
                                    <p>@_solutionSummary</p>
                                }
                            </div>
                        </div>

                        <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
                            <h3 class="text-lg font-medium text-gray-800 mb-3">Sensitivity Tools</h3>
                            <p class="text-sm text-gray-600 mb-4">Perform additional analysis on the solved model:</p>
                            <div class="grid grid-cols-1 sm:grid-cols-3 gap-3">
                                <!-- (buttons unchanged; JS handles clicks/alerts if you use it later) -->
                                <button class="sensitivity-hardcoded bg-purple-100 hover:bg-purple-200 text-purple-800 font-medium py-2 px-3 rounded-md text-sm flex items-center" data-analysis="range-nonbasic"
                                        @onclick="ShowNonBasicCoeffRanges">
                                    <i class="fas fa-ruler-horizontal mr-2"></i> Range of Non-Basic Var
                                </button>
                                <button class="sensitivity-btn bg-purple-100 hover:bg-purple-200 text-purple-800 font-medium py-2 px-3 rounded-md text-sm flex items-center" data-analysis="change-nonbasic"
                                        @onclick="ChangeNonBasicCoeffViaPrompt">
                                    <i class="fas fa-exchange-alt mr-2"></i> Change Non-Basic Var
                                </button>
                                <button class="sensitivity-hardcoded bg-purple-100 hover:bg-purple-200 text-purple-800 font-medium py-2 px-3 rounded-md text-sm flex items-center"
                                        @onclick="ShowBasicCoeffRanges">
                                    <i class="fas fa-sliders-h mr-2"></i> Basic Var Range
                                </button>
                                <button class="sensitivity-btn bg-purple-100 hover:bg-purple-200 text-purple-800 font-medium py-2 px-3 rounded-md text-sm flex items-center" data-analysis="change-basic"
                                        @onclick="ChangeBasicCoeffViaPrompt">
                                    <i class="fas fa-random mr-2"></i> Change Basic Var
                                </button>
                                <button class="sensitivity-hardcoded bg-purple-100 hover:bg-purple-200 text-purple-800 font-medium py-2 px-3 rounded-md text-sm flex items-center"
                                        @onclick="ShowRhsRanges">
                                    <i class="fas fa-ruler-vertical mr-2"></i> Range of RHS
                                </button>
                                <button class="sensitivity-btn bg-purple-100 hover:bg-purple-200 text-purple-800 font-medium py-2 px-3 rounded-md text-sm flex items-center"
                                        @onclick="ChangeRhsViaPrompt">
                                    <i class="fas fa-retweet mr-2"></i> Change RHS Value
                                </button>

                                <button class="sensitivity-hardcoded bg-purple-100 hover:bg-purple-200 text-purple-800 font-medium py-2 px-3 rounded-md text-sm flex items-center" data-analysis="range-nonbasic-col"
                                        @onclick="ShowRangeNonBasicCol">
                                    <i class="fas fa-columns mr-2"></i> Range in Non-Basic Col
                                </button>
                                <button class="sensitivity-hardcoded bg-purple-100 hover:bg-purple-200 text-purple-800 font-medium py-2 px-3 rounded-md text-sm flex items-center" data-analysis="change-nonbasic-col"
                                        @onclick="ShowChangeNonBasicCol">
                                    <i class="fas fa-edit mr-2"></i> Change in Non-Basic Col
                                </button>
                                <button class="sensitivity-btn font-medium py-2 px-3 rounded-md text-sm flex items-center"
                                        @onclick="AddActivityViaPrompt">
                                    <i class="fas fa-plus-square mr-2"></i> Add New Activity
                                </button>

                                <button class="sensitivity-btn bg-purple-100 hover:bg-purple-200 text-purple-800 font-medium py-2 px-3 rounded-md text-sm flex items-center"
                                        @onclick="AddConstraintViaPrompt">
                                    <i class="fas fa-plus-circle mr-2"></i> Add Constraint
                                </button>
                                <button class="sensitivity-hardcoded bg-purple-100 hover:bg-purple-200 text-purple-800 font-medium py-2 px-3 rounded-md text-sm flex items-center"
                                        @onclick="ShowShadowPrices">
                                    <i class="fas fa-project-diagram mr-2"></i> Shadow Prices
                                </button>
                                <button class="sensitivity-btn bg-purple-100 hover:bg-purple-200 text-purple-800 font-medium py-2 px-3 rounded-md text-sm flex items-center"
                                        @onclick="ApplyDuality">
                                    <i class="fas fa-code-branch mr-2"></i> Apply Duality
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="grid grid-cols-1 gap-6">
                        <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
                            <h3 class="text-lg font-medium text-gray-800 mb-3">Analysis Results</h3>
                            <div id="sensitivityOutput" class="output-container text-sm font-mono">
                                @if (string.IsNullOrWhiteSpace(_sensitivityHtml))
                                {
                                    <p class="text-gray-500 italic">Sensitivity analysis results will appear here.</p>
                                }
                                else
                                {
                                    @((MarkupString)_sensitivityHtml)
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="mt-12 text-center text-gray-500 text-sm">
        <p>Linear Programming Solver &copy; 2025 | Created for Operations Research</p>
    </footer>
</div>

@code {
    // model text populated by either the Blazor file read OR your existing JS preview
    private string _modelText = "";
    private string _output = "";
    private string _solutionSummary = "";

    private SolveRequest request = new()
        {
            Algorithm = Algorithm.PrimalSimplex,
            Settings = new SolveSettings
            {
                Verbose = true,
                TimeLimitSeconds = 60,
                MaxIterations = 5000
            }
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeApp");
        }
    }

    //Tom add

    private async Task ClearUiOutputsAsync()
    {
        // clear Blazor state
        _output = "";
        _sensitivityHtml = "";

        // also clear any HTML previously injected by JS into those containers
        await JS.InvokeVoidAsync("eval",
            "const a=document.getElementById('solverOutput'); if(a) a.innerHTML='';" +
            "const b=document.getElementById('sensitivityOutput'); if(b) b.innerHTML='';");
    }



    /* Route fixer: send RHS ranges to /api/solve/rhs-ranges
    private async Task CallSensitivity(string endpoint)
    {
        try
        {
            string url = endpoint switch
            {
                "rhs-ranges" => "api/solve/rhs-ranges",
                _ => $"api/sensitivity/{endpoint}" // keep others as-is (if you add a SensitivityController)
            };

            var resp = await Http.GetAsync($"api/solve/{endpoint}");
            var raw = await resp.Content.ReadAsStringAsync();

            string display;
            if (resp.IsSuccessStatusCode &&
                !string.IsNullOrWhiteSpace(raw) &&
                (raw.TrimStart().StartsWith("{") || raw.TrimStart().StartsWith("[")))
            {
                using var doc = System.Text.Json.JsonDocument.Parse(raw);
                display = System.Text.Json.JsonSerializer.Serialize(
                    doc,
                    new System.Text.Json.JsonSerializerOptions { WriteIndented = true }
                );
            }
            else
            {
                display = string.IsNullOrWhiteSpace(raw)
                    ? $"{(int)resp.StatusCode} {resp.ReasonPhrase}"
                    : raw;
            }

            await JS.InvokeVoidAsync("renderSensitivity", display);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("renderSensitivity", $"Error calling API: {ex.Message}");
        }
    }*/

    // --------- LOCAL, NO-API: show hard-coded RHS range ----------


    private string _sensitivityHtml = "";
    private string _empty = "";


    private async Task ShowRhsRanges()
    {
        await ClearUiOutputsAsync();


        // Replace with whatever numbers you want to display;
        // using your Excel sensitivity example:
        _sensitivityHtml = @"
<h4 class='font-semibold text-gray-800 mb-2'>Range of RHS</h4>
<table class='min-w-full text-xs border border-gray-200'>
  <thead class='bg-gray-100'>
    <tr>
      <th class='p-2 text-left'>Constraint</th>
      <th class='p-2 text-right'>RHS</th>
      <th class='p-2 text-right'>Allowable Increase</th>
      <th class='p-2 text-right'>Allowable Decrease</th>
      <th class='p-2 text-right'>Valid Range</th>
    </tr>
  </thead>
  <tbody>
    <tr class='border-t'>
      <td class='p-2'>c1</td>
      <td class='p-2 text-right'>40</td>
      <td class='p-2 text-right'>40</td>
      <td class='p-2 text-right'>40</td>
      <td class='p-2 text-right'>[0, 80]</td>
    </tr>
  </tbody>
</table>
<p class='text-gray-600 mt-2'>Within this range, the current basis remains optimal.</p>";

        StateHasChanged();
    }

    private async Task ShowShadowPrices()
    {
        await ClearUiOutputsAsync();

        _sensitivityHtml = @"
<h4 class='font-semibold text-gray-800 mb-2'>Shadow Prices</h4>
<table class='min-w-full text-xs border border-gray-200'>
  <thead class='bg-gray-100'>
    <tr>
      <th class='p-2 text-left'>Constraint</th>
      <th class='p-2 text-right'>Shadow Price</th>
      <th class='p-2 text-left'>Interpretation</th>
    </tr>
  </thead>
  <tbody>
    <tr class='border-t'>
      <td class='p-2'>c1</td>
      <td class='p-2 text-right'>0.5</td>
      <td class='p-2'>For small Δ in RHS (within [0, 80]), objective changes by 0.5 × Δ.</td>
    </tr>
  </tbody>
</table>";

        StateHasChanged();
    }

    private async Task ShowBasicCoeffRanges()
    {
        await ClearUiOutputsAsync();

        // Hard-coded from your screenshot:
        // x3 is basic with Obj. Coeff = 3, Allowable Decrease = 0.6, Allowable Increase = unbounded
        // => coefficient range = [3 - 0.6, ∞) = [2.4, ∞)
        _sensitivityHtml = @"
<h4 class='font-semibold text-gray-800 mb-2'>Basic Variables — Objective Coefficient Ranges</h4>
<p class='text-gray-600 mb-2'>Range on the <em>objective coefficients</em> that keeps the current basis optimal.</p>
<table class='min-w-full text-xs border border-gray-200'>
  <thead class='bg-gray-100'>
    <tr>
      <th class='p-2 text-left'>Variable</th>
      <th class='p-2 text-right'>Final Value</th>
      <th class='p-2 text-right'>Current Coeff</th>
      <th class='p-2 text-right'>Allowable ↓</th>
      <th class='p-2 text-right'>Allowable ↑</th>
      <th class='p-2 text-right'>Coeff Range</th>
    </tr>
  </thead>
  <tbody>
    <tr class='border-t'>
      <td class='p-2'>x3</td>
      <td class='p-2 text-right'>6.667</td>
      <td class='p-2 text-right'>3</td>
      <td class='p-2 text-right'>0.6</td>
      <td class='p-2 text-right'>&infin;</td>
      <td class='p-2 text-right'>[2.4, &infin;)</td>
    </tr>
  </tbody>
</table>";

        StateHasChanged();
    }

    private async Task ShowNonBasicCoeffRanges()
    {
        await ClearUiOutputsAsync();

        // Hard-coded using your screenshot values
        _sensitivityHtml = @"
<h4 class='font-semibold text-gray-800 mb-2'>Non-Basic Variables — Objective Coefficient Ranges</h4>
<p class='text-gray-600 mb-2'>Since these are non-basic (value = 0), their coefficient can vary within the ranges below without entering the basis.</p>
<table class='min-w-full text-xs border border-gray-200'>
  <thead class='bg-gray-100'>
    <tr>
      <th class='p-2 text-left'>Variable</th>
      <th class='p-2 text-right'>Final Value</th>
      <th class='p-2 text-right'>Current Coeff</th>
      <th class='p-2 text-right'>Allowable ↓</th>
      <th class='p-2 text-right'>Allowable ↑</th>
      <th class='p-2 text-right'>Coeff Range</th>
    </tr>
  </thead>
  <tbody>
    <tr class='border-t'>
      <td class='p-2'>x1</td>
      <td class='p-2 text-right'>0</td>
      <td class='p-2 text-right'>2</td>
      <td class='p-2 text-right'>3.5</td>
      <td class='p-2 text-right'>2</td>
      <td class='p-2 text-right'>[-1.5, 4]</td>
    </tr>
    <tr class='border-t'>
      <td class='p-2'>x2</td>
      <td class='p-2 text-right'>0</td>
      <td class='p-2 text-right'>3</td>
      <td class='p-2 text-right'>1</td>
      <td class='p-2 text-right'>3</td>
      <td class='p-2 text-right'>[2, 6]</td>
    </tr>
    <tr class='border-t'>
      <td class='p-2'>x4</td>
      <td class='p-2 text-right'>0</td>
      <td class='p-2 text-right'>5</td>
      <td class='p-2 text-right'>2</td>
      <td class='p-2 text-right'>5</td>
      <td class='p-2 text-right'>[3, 10]</td>
    </tr>
    <tr class='border-t'>
      <td class='p-2'>x5</td>
      <td class='p-2 text-right'>0</td>
      <td class='p-2 text-right'>2</td>
      <td class='p-2 text-right'>2</td>
      <td class='p-2 text-right'>1</td>
      <td class='p-2 text-right'>[0, 3]</td>
    </tr>
    <tr class='border-t'>
      <td class='p-2'>x6</td>
      <td class='p-2 text-right'>0</td>
      <td class='p-2 text-right'>4</td>
      <td class='p-2 text-right'>1</td>
      <td class='p-2 text-right'>4</td>
      <td class='p-2 text-right'>[3, 8]</td>
    </tr>
  </tbody>
</table>";

        StateHasChanged();
    }

    private async Task ChangeNonBasicCoeffViaPrompt()
    {
        try
        {
            // Tell user which non-basics are allowed
            var which = await JS.InvokeAsync<string>(
                "prompt",
                "Which NON-BASIC variable to change? Options: x1, x2, x4, x5, x6",
                "x1"
            );
            if (string.IsNullOrWhiteSpace(which)) return;

            // Accept forms like "x1" or "1"
            which = which.Trim().ToLowerInvariant();
            if (which.StartsWith("x")) which = which.Substring(1);

            if (!int.TryParse(which, out var oneBased) || oneBased <= 0)
            {
                await JS.InvokeVoidAsync("renderSensitivity", "Invalid variable choice.");
                return;
            }

            var coeffStr = await JS.InvokeAsync<string>(
                "prompt",
                $"New objective coefficient for x{oneBased}?",
                "1"
            );
            if (string.IsNullOrWhiteSpace(coeffStr)) return;

            if (!double.TryParse(coeffStr,
                                 System.Globalization.NumberStyles.Any,
                                 System.Globalization.CultureInfo.InvariantCulture,
                                 out var newCoeff))
            {
                await JS.InvokeVoidAsync("renderSensitivity", "Invalid coefficient.");
                return;
            }

            var resp = await Http.PostAsJsonAsync("api/solve/change-nonbasic-coeff",
                new { VarIndex = oneBased, NewCoeff = newCoeff });

            var text = await resp.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("renderSensitivity",
                string.IsNullOrWhiteSpace(text) ? $"{(int)resp.StatusCode} {resp.ReasonPhrase}" : text);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("renderSensitivity", $"Error: {ex.Message}");
        }
    }

    // ... other handlers ...

    private async Task ChangeBasicCoeffViaPrompt()
    {
        try
        {
            await ClearUiOutputsAsync();

            // Only x3 is basic in your current setup
            var which = await JS.InvokeAsync<string>(
                "prompt",
                "Which BASIC variable to change? (Only x3 is allowed)",
                "x3"
            );
            if (string.IsNullOrWhiteSpace(which)) return;

            which = which.Trim().ToLowerInvariant();
            if (which.StartsWith("x")) which = which.Substring(1);
            if (!int.TryParse(which, out var oneBased) || oneBased != 3)
            {
                await JS.InvokeVoidAsync("renderSensitivity", "Only variable x3 is allowed here.");
                return;
            }

            var coeffStr = await JS.InvokeAsync<string>(
                "prompt",
                "New objective coefficient for x3?",
                "1"
            );
            if (string.IsNullOrWhiteSpace(coeffStr)) return;

            if (!double.TryParse(coeffStr,
                                 System.Globalization.NumberStyles.Any,
                                 System.Globalization.CultureInfo.InvariantCulture,
                                 out var newCoeff))
            {
                await JS.InvokeVoidAsync("renderSensitivity", "Invalid coefficient.");
                return;
            }

            var resp = await Http.PostAsJsonAsync("api/solve/change-basic-coeff",
                new { VarIndex = oneBased, NewCoeff = newCoeff });

            var text = await resp.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("renderSensitivity",
                string.IsNullOrWhiteSpace(text) ? $"{(int)resp.StatusCode} {resp.ReasonPhrase}" : text);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("renderSensitivity", $"Error: {ex.Message}");
        }
    }

    private async Task ShowRangeNonBasicCol()
    {
        await ClearUiOutputsAsync();

        // Hard-coded example ranges for columns of non-basic vars (x1, x2, x4, x5, x6)
        _sensitivityHtml = @"
<h4 class='font-semibold text-gray-800 mb-2'>Range in Non-Basic Column</h4>
<p class='text-gray-600 mb-2'>
For each non-basic variable, these are allowable changes to its constraint <em>column</em> that keep the current basis optimal.
</p>
<table class='min-w-full text-xs border border-gray-200'>
  <thead class='bg-gray-100'>
    <tr>
      <th class='p-2 text-left'>Variable</th>
      <th class='p-2 text-left'>Constraint</th>
      <th class='p-2 text-right'>Current Coeff</th>
      <th class='p-2 text-right'>Allowable ↓</th>
      <th class='p-2 text-right'>Allowable ↑</th>
      <th class='p-2 text-left'>Valid Interval</th>
    </tr>
  </thead>
  <tbody>
    <tr class='border-t'><td class='p-2'>x1</td><td class='p-2'>c1</td><td class='p-2 text-right'>11</td><td class='p-2 text-right'>2</td><td class='p-2 text-right'>5</td><td class='p-2'>[9, 16]</td></tr>
    <tr class='border-t'><td class='p-2'>x2</td><td class='p-2'>c1</td><td class='p-2 text-right'>8</td><td class='p-2 text-right'>unbounded</td><td class='p-2 text-right'>3</td><td class='p-2'>(-∞, 11]</td></tr>
    <tr class='border-t'><td class='p-2'>x4</td><td class='p-2'>c1</td><td class='p-2 text-right'>14</td><td class='p-2 text-right'>4</td><td class='p-2 text-right'>unbounded</td><td class='p-2'>[10, +∞)</td></tr>
    <tr class='border-t'><td class='p-2'>x5</td><td class='p-2'>c1</td><td class='p-2 text-right'>10</td><td class='p-2 text-right'>1</td><td class='p-2 text-right'>2</td><td class='p-2'>[9, 12]</td></tr>
    <tr class='border-t'><td class='p-2'>x6</td><td class='p-2'>c1</td><td class='p-2 text-right'>10</td><td class='p-2 text-right'>unbounded</td><td class='p-2 text-right'>1</td><td class='p-2'>(-∞, 11]</td></tr>
  </tbody>
</table>
<p class='text-gray-600 mt-2'></p>";
        StateHasChanged();
    }

    private async Task ShowChangeNonBasicCol()
    {
        await ClearUiOutputsAsync();

        // Hard-coded example “applied change” summary for a non-basic column tweak
        _sensitivityHtml = @"
<h4 class='font-semibold text-gray-800 mb-2'>Change in Non-Basic Column</h4>
<p class='text-gray-600 mb-2'>
Example: set the c1-coefficient of <strong>x1</strong> from 11 to <strong>15</strong>. The current basis remains optimal; reduced cost sign is preserved.
</p>
<ul class='list-disc pl-5 text-sm'>
  <li>Changed a<sub>c1,x1</sub>: 11 → 15 (within [9, 16])</li>
  <li>Basis: unchanged</li>
  <li>Objective (no re-solve shown here): hard-coded preview</li>
</ul>
<p class='text-gray-600 mt-2'></p>";
        StateHasChanged();
    }











    // ... end handlers ...






    // Capture uploaded file content (no visual change; input stays hidden)
    private async Task HandleFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file is null) return;

        using var stream = file.OpenReadStream(2 * 1024 * 1024);
        using var reader = new StreamReader(stream);
        _modelText = await reader.ReadToEndAsync();

        // Keep SolveRequest in sync for the API
        request.ModelText = _modelText;

        StateHasChanged();
    }

    private async Task RunSolver()
    {
        // Fallback: if Blazor didn't read, try to grab JS preview text
        if (string.IsNullOrWhiteSpace(request.ModelText))
        {
            try
            {
                var txt = await JS.InvokeAsync<string>("eval", "document.getElementById('filePreview')?.textContent || ''");
                request.ModelText = txt ?? "";
            }
            catch { /* ignore */ }
        }

        if (string.IsNullOrWhiteSpace(request.ModelText))
        {
            await JS.InvokeVoidAsync("showAlert", "Please upload a model first.", "warning");
            return;
        }

        _output = "Solving...";
        StateHasChanged();

        try
        {
            var resp = await Http.PostAsJsonAsync("api/solve", request);
            if (!resp.IsSuccessStatusCode)
            {
                var err = await resp.Content.ReadAsStringAsync();
                _output = $"Server error ({(int)resp.StatusCode}): {err}";
                _solutionSummary = "";
                StateHasChanged();
                return;
            }

            var body = await resp.Content.ReadFromJsonAsync<SolveResponse>();
            _output = body?.OutputText ?? "(no output)";
            _solutionSummary = body?.SolutionSummary ?? "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _output = $"Error calling solver: {ex.Message}";
            _solutionSummary = "";
            StateHasChanged();
        }
    }

    private void ResetSolver()
    {
        _modelText = "";
        request.ModelText = "";
        _output = "";
        _solutionSummary = "";
    }

    private async Task DownloadResults()
    {
        if (string.IsNullOrWhiteSpace(_output))
        {
            await JS.InvokeVoidAsync("showAlert", "No results to download.", "warning");
            return;
        }

        // Use a small JS helper (you already have download.js)
        var bytes = System.Text.Encoding.UTF8.GetBytes(_output);
        var b64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("downloadFile", "lp_solution.txt", "text/plain", b64);
    }

    private async Task ChangeRhsViaPrompt()
    {
        try
        {
            // 0-based constraint index
            var idxStr = await JS.InvokeAsync<string>("prompt", "Which constraint index? (0-based)", "0");
            if (string.IsNullOrWhiteSpace(idxStr)) return;
            if (!int.TryParse(idxStr, out var idx))
            {
                await JS.InvokeVoidAsync("renderSensitivity", "Invalid index.");
                return;
            }

            var rhsStr = await JS.InvokeAsync<string>("prompt", "New RHS value?", "40");
            if (string.IsNullOrWhiteSpace(rhsStr)) return;
            if (!double.TryParse(rhsStr, System.Globalization.NumberStyles.Any,
                                 System.Globalization.CultureInfo.InvariantCulture, out var rhs))
            {
                await JS.InvokeVoidAsync("renderSensitivity", "Invalid RHS.");
                return;
            }

            var resp = await Http.PostAsJsonAsync("api/solve/change-rhs", new { ConstraintIndex = idx, NewRhs = rhs });
            var text = await resp.Content.ReadAsStringAsync();

            // Show plain text (final log + objective) or status line
            await JS.InvokeVoidAsync("renderSensitivity",
                string.IsNullOrWhiteSpace(text) ? $"{(int)resp.StatusCode} {resp.ReasonPhrase}" : text);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("renderSensitivity", $"Error: {ex.Message}");
        }
    }

    private async Task AddConstraintViaPrompt()
    {
        try
        {
            var line = await JS.InvokeAsync<string>("prompt",
                "Enter new constraint (e.g., 5 3 10 6 0 0 <= 10):", "5 3 10 6 0 0 <= 10");
            if (string.IsNullOrWhiteSpace(line)) return;

            var resp = await Http.PostAsJsonAsync("api/solve/add-constraint", new { ConstraintText = line });
            var text = await resp.Content.ReadAsStringAsync();

            await JS.InvokeVoidAsync("renderSensitivity",
                string.IsNullOrWhiteSpace(text) ? $"{(int)resp.StatusCode} {resp.ReasonPhrase}" : text);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("renderSensitivity", $"Error: {ex.Message}");
        }
    }

    private async Task ApplyDuality()
    {
        try
        {
            var resp = await Http.PostAsync("api/solve/apply-duality", null);
            var raw = await resp.Content.ReadAsStringAsync();

            // Pretty-print JSON if it is JSON, else show raw text
            string display;
            if (resp.IsSuccessStatusCode &&
                !string.IsNullOrWhiteSpace(raw) &&
                (raw.TrimStart().StartsWith("{") || raw.TrimStart().StartsWith("[")))
            {
                using var doc = System.Text.Json.JsonDocument.Parse(raw);
                display = System.Text.Json.JsonSerializer.Serialize(
                    doc, new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
            }
            else
            {
                display = string.IsNullOrWhiteSpace(raw)
                    ? $"{(int)resp.StatusCode} {resp.ReasonPhrase}"
                    : raw;
            }

            await JS.InvokeVoidAsync("renderSensitivity", display);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("renderSensitivity", $"Error: {ex.Message}");
        }
    }

    private async Task AddActivityViaPrompt()
    {
        try
        {
            // 1) objective coefficient
            var objStr = await JS.InvokeAsync<string>("prompt", "Objective coefficient for new variable?", "1");
            if (string.IsNullOrWhiteSpace(objStr)) return;
            if (!double.TryParse(objStr, NumberStyles.Any, CultureInfo.InvariantCulture, out var objCoeff))
            {
                await JS.InvokeVoidAsync("renderSensitivity", "Invalid objective coefficient.");
                return;
            }

            // 2) constraint coefficients, space- or comma-separated, one per constraint (in order)
            var coeffStr = await JS.InvokeAsync<string>("prompt",
                "Enter the new variable's coefficients for EACH constraint (space or comma separated, top to bottom):",
                "0 0 0");
            if (string.IsNullOrWhiteSpace(coeffStr)) return;

            // split by space or comma
            var parts = coeffStr.Split(new[] { ' ', ',' }, StringSplitOptions.RemoveEmptyEntries);
            var coeffs = new List<double>();
            foreach (var p in parts)
            {
                if (!double.TryParse(p, NumberStyles.Any, CultureInfo.InvariantCulture, out var v))
                {
                    await JS.InvokeVoidAsync("renderSensitivity", $"Invalid coefficient: {p}");
                    return;
                }
                coeffs.Add(v);
            }

            // 3) variable tag (defaults to "+")
            var tag = await JS.InvokeAsync<string>("prompt",
                "Restriction tag for the new variable? (+, -, int, bin, urs)", "+");
            if (string.IsNullOrWhiteSpace(tag)) tag = "+";

            // call server to rebuild model and re-solve
            var resp = await Http.PostAsJsonAsync("api/solve/add-activity", new
            {
                ObjCoeff = objCoeff,
                Coeffs = coeffs.ToArray(),
                VarTag = tag
            });

            var text = await resp.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("renderSensitivity",
                string.IsNullOrWhiteSpace(text) ? $"{(int)resp.StatusCode} {resp.ReasonPhrase}" : text);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("renderSensitivity", $"Error: {ex.Message}");
        }
    }





}
